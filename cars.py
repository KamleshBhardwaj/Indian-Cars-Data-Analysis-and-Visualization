# -*- coding: utf-8 -*-
"""Cars.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xe2-3lPM4bt0VKq_RJLHQG6TGL0jkpVg

Indian Cars: Data Analysis and Visualization
"""

#importing All Librariesimport numpy as np
import pandas as pd
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt
import plotly
import plotly.express as px
from matplotlib.pyplot import figure

#load the dataset
df = pd.read_csv("/content/drive/MyDrive/cars_ds_final.csv")

#datatypes
df.dtypes

#descripition of dataset
df.describe()

# cheaking the null values in dataset
# Check for missing values
df.isnull().sum()

# cheaking all the null values
df.isnull().sum()

# cheaking all unique value in particular column
df.nunique()

#Counts the number of duplicate rows
df[df.duplicated()].count()

#counts the number of null values in each column
df[df.isnull()].count()

#Fills missing values with an empty string and removes spaces from all string columns in the DataFrame 'df'
df=df.fillna('')
df=df.replace(' ', '')

#eelects the last few rows of the DataFrame 'df' where the 'Make' column equals 'Tata'.
df[df.Make =='Tata'].tail()

"""Pie Charts:
Represent the contribution of different car models or manufacturers using pie charts.
"""

#Creates a pie chart showing the distribution of car manufacturers in India based on the 'Make' column of the DataFrame 'df'
fig = plt.figure(figsize = (10,20))
ax = fig.subplots()
df.Make.value_counts().plot(ax=ax, kind='pie')
ax.set_ylabel("")
ax.set_title("Top Car Making Companies in India")
plt.show()

# Loading the datset
df = pd.read_csv("/content/drive/MyDrive/cars_ds_final.csv")

# finding the missing values
df.isnull().sum()

# Calculate the mean of numeric columns only
df.fillna(df.mean(numeric_only=True), inplace=True)

df.fillna(df.mode().iloc[0], inplace=True)

# we will remove the rows with missing value
df.dropna(inplace=True)

# lets again check the missing values
df.isnull().sum()

# we will store the cleaned dataset to new file
df.to_csv('new dataset', index=False)

from sklearn.impute import SimpleImputer
import numpy as np

# Removing rows with missing data
df_cleaned_rows = df.dropna()

# Missing Values (using mean as an example)
df_cleaned = df.select_dtypes(include=np.number)
imputer = SimpleImputer(strategy="mean")
df_imputed = pd.DataFrame(imputer.fit_transform(df_cleaned), columns=df_cleaned.columns)

# Displaying few rows from dataset
print("Cleaned DataFrame (removing rows):")
df_cleaned_rows.head()

print("Imputed DataFrame:")
df_imputed.head()

#cheaking and printing datatypes of each column
data_types = df.dtypes
print(data_types)

#convert 'categorical_column' to categorical data type
df.rename(columns={'categorical_column': 'new_column_name'}, inplace=True)

#checking if 'date_column' exists in the DataFrame
if 'date_column' in df.columns:
    #converting the 'date_column' to DateTime format
    df['date_column'] = pd.to_datetime(df['date_column'])

#converting 'numeric_column' to numeric type
if 'numeric_column' in df.columns:
    df['numeric_column'] = pd.to_numeric(df['numeric_column'], errors='coerce')

#droping rows with missing values
df['column_with_missing_values'] = np.nan                          # Impute with a specific value
df.dropna(subset=['column_with_missing_values'], inplace=True)

#datatypes after the conversion
df.dtypes

#loading the original dataset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

df.head()

df.describe()

# Calculate the mean for numeric columns
mean_values = df.mean(numeric_only=True)
print("Mean:")
print(mean_values)

#calculating median for all numeric columns
median_values = df.median(numeric_only=True) # Add numeric_only=True to only calculate median for numeric columns
print("Median:")
print(median_values)

#calculating mode for all numeric columns
mode_values = df.mode().iloc[0]
print("Mode:")
print(mode_values)

#minimum for all numeric columns
min_values = df.min(numeric_only=True) # Add numeric_only=True to only calculate min for numeric columns
print("Minimum:")
print(min_values)

#maximum for all numeric columns
max_values = df.max(numeric_only=True) # Add numeric_only=True to only calculate max for numeric columns
print("Maximum:")
print(max_values)

#calculating standard deviation for all numeric columns
std_deviation_values = df.std(numeric_only=True) # Add numeric_only=True to only calculate for numeric columns
print("Standard Deviation:")
print(std_deviation_values)

#Creates a pandas DataFrame 'df' with three columns ('column_1', 'column_2', 'column_3') containing specific sets of values
df = pd.DataFrame({
    'column_1': [20,40,60,80,100,120],
    'column_2': [5,50,62,79,95,105],
    'column_3': [38,56,23,45,67,89]
})

#List of numeric columns ('column_1', 'column_2', 'column_3') chosen for visualization
numeric_columns_to_visualize = ['column_1', 'column_2','column_3']

#Plots histograms for each numeric column ('column_1', 'column_2', 'column_3') in the DataFrame 'df' with 20 bins
plt.figure(figsize=(12, 6))
for i, column in enumerate(numeric_columns_to_visualize, 1):
    plt.subplot(1, len(numeric_columns_to_visualize), i)
    plt.hist(df[column], bins=20, edgecolor='green', color='purple')
    plt.title(f'Histogram of {column}')

plt.tight_layout()
plt.show()

#Creates a DataFrame 'df' with categorical data in three columns: 'column_1', 'column_2', and 'column_3'
df = pd.DataFrame({
    'column_1': ['Category_A', 'Category_B', 'Category_A', 'Category_A', 'Category_B'],
    'column_2': ['Type_X', 'Type_Y', 'Type_X', 'Type_Y', 'Type_X'],
    'column_3': ['Label_1', 'Label_2', 'Label_1', 'Label_3', 'Label_2'],
})

columns_to_visualize = ['column_1', 'column_2', 'column_3']

columns_to_visualize = ['column_1', 'column_2']

#Counts the occurrences of each unique value in the specified columns and returns a DataFrame with the counts
counts = df[columns_to_visualize].apply(pd.value_counts)

#Plots a stacked bar chart to visualize the counts of categorical variables
counts.T.plot(kind='bar', stacked=True, figsize=(18, 10), colormap='magma')
plt.title('Categorical Variables', fontsize=30)
plt.xlabel('Category')
plt.ylabel('Count')
plt.legend(title='Categorical Variable', bbox_to_anchor=(1, 1))
plt.show()

#Creates a DataFrame 'df' with three numeric columns: 'numeric_column_1', 'numeric_column_2', 'numeric_column_3'
df = pd.DataFrame({
    'numeric_column_1': [5, 10, 15, 20, 25, 30, 35, 40, 45],
    'numeric_column_2': [100, 150, 200, 250, 300, 350, 400, 450, 500],
    'numeric_column_3': [10, 20, 30, 40, 50, 60, 70, 80, 90],
})

numeric_columns_to_visualize = ['numeric_column_1', 'numeric_column_2']

sns.set_palette("husl")

#Displays box plots horizontally for the numeric variables
plt.figure(figsize=(12, 8))
sns.boxplot(data=df[numeric_columns_to_visualize], orient='h', width=0.9)

plt.title('Box Plots of Numeric Variables', fontsize= 24)
plt.xlabel('Values', fontsize=18)
plt.ylabel('Numeric Variables', fontsize=18)

plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

df = pd.DataFrame({
    'car_model': ['Sedan', 'SUV', 'Hatchback', 'Sedan', 'SUV', 'SUV', 'Hatchback', 'Sedan'],
    'manufacturer': ['Toyota', 'Honda', 'Ford', 'Toyota', 'Honda', 'Ford', 'Nissan', 'Toyota'],
    'color': ['Red', 'Blue', 'Black', 'White', 'Red', 'Blue', 'Black', 'White']
})

categorical_column_to_visualize = 'car_model'

categorical_column_to_visualize = 'car_model'

category_contribution = df[categorical_column_to_visualize].value_counts()

category_contribution.plot.pie(autopct='%1.1f%%', startangle=90, figsize=(7,7))
plt.title(f'Contribution of {categorical_column_to_visualize}', fontsize=20)
plt.show()

df = pd.read_csv("/content/drive/MyDrive/cars_ds_final.csv")

(df.columns)

(df.dtypes)

df.rename(columns={'category_column': 'new_column_name'}, inplace=True)

#Displays a count plot for the 'Body_Type' categorical variable in the DataFrame 'df'
plt.figure(figsize=(20,10))
sns.countplot(data=df, y='Body_Type',alpha=.6,color='blue')
plt.title('categorical variables',fontsize=20)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.xlabel(' ')
plt.ylabel(' ');

"""# **Bivariate Analysis:**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#loading the dataset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#displaying the shape of the dataset
df.shape

#displaying the initial dataset
df.head()

#displaying information of dataset
df.info()

#finding the unique values
df.nunique()

# Calculate the correlation matrix, excluding non-numeric columns
correlation_matrix = df.select_dtypes(include=np.number).corr()

# Show the plot using another method
fig = plt.figure(figsize=(20,18))
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', linewidths=.8)
plt.title('Correlation Matrix')

# Show the plot using fig.show() instead of plt.show()
fig.show()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# loading dataset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

# Generate example data
np.random.seed(50)
x = np.random.rand(100)
y = 3 * x + 1 + 0.1 * np.random.randn(100)

# Create scatter plot
plt.scatter(x, y, color='red', marker='h', label='Data Points')

# Add labels and title
plt.title('Scatter Plot: Relationship between X and Y')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Show the plot
plt.grid(True)
plt.legend()
plt.show()

from sklearn.datasets import load_iris
import pandas as pd

#load the dataset (replace 'path/to/your/IndianCarsDataset.csv' with the actual file path)
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#load the Iris dataset from Scikit-learn
iris_sklearn = load_iris()

iris = pd.DataFrame(data=iris_sklearn.data, columns=iris_sklearn.feature_names)

iris['target'] = iris_sklearn.target

#create pair plot
sns.pairplot(iris, hue='target')  # Use 'target' instead of 'species'
plt.show()

#loading the datset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#data
data = {
    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],
    'Value': [20,30,40,50,60,80],
    'Additional_Category': ['X', 'Y', 'X', 'Y', 'X', 'Y']
}

df = pd.DataFrame(data)

#create a bar chart with the 'hue' parameter
plt.figure(figsize=(10, 6))
sns.barplot(x='Category', y='Value', hue='Additional_Category', data=df, palette='Set2')

#add labels and title
plt.xlabel('Category')
plt.ylabel('Value')
plt.title('Bar Chart with Hue Parameter')

#show the plot
plt.show()

#loading the dataset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#generate random data for demonstration
np.random.seed(50)
data = np.random.rand(20,10)

#calculate the correlation matrix
correlation_matrix = np.corrcoef(data, rowvar=False)

#create a heatmap
sns.heatmap(correlation_matrix, annot=True,cmap='viridis', xticklabels=False, yticklabels=False)
plt.title('Correlation Matrix Heatmap')
plt.show()

#loading the datset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#generate random data for demonstration
np.random.seed(50)
x = np.random.rand(300)
y = 5 * x + 2 + 0.1 * np.random.randn(300)  # Linear relationship with some noise
data = np.column_stack((x, y))

#create a joint plot
sns.jointplot(x=data[:, 0], y=data[:, 1], kind='scatter', marginal_kws=dict(bins=20, fill=False))
plt.show()

# loading the dataset
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#data
data = {
    'Day': ['Thur', 'Fri', 'Sat', 'Sun', 'Thur', 'Fri', 'Sat', 'Sun'],
    'Total_Bill': [29.0, 85.5, 50.8, 70.2, 78.7, 15.0, 75.5, 85.0],
    'Sex': ['Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female']
}
df = pd.DataFrame(data)

#create a box plot with hue
sns.boxplot(x='Day', y='Total_Bill', hue='Sex', data=df)
plt.title('Box Plot with Hue')
plt.xlabel('Day')
plt.ylabel('Total Bill')
plt.legend(title='Sex', loc='upper right')
plt.show()

#load the dataset (replace 'path/to/your/IndianCarsDataset.csv' with the actual file path)
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#Generates a DataFrame 'df' with categorical and numeric variables. Displays a box plot, violin plot, bar plot with error bars (ci='sd'), count plot, and point plot (ci='sd') to visualize the distribution and frequency of the numeric variable across different categories in the categorical variable
np.random.seed(42)
categories = np.random.choice(['A', 'B', 'C'], size=200)
values = np.random.normal(loc=0, scale=1, size=200)

df = pd.DataFrame({'categorical_variable': categories, 'numeric_variable': values})

sns.boxplot(x='categorical_variable', y='numeric_variable', data=df)
plt.show()

sns.violinplot(x='categorical_variable', y='numeric_variable', data=df)
plt.show()

sns.barplot(x='categorical_variable', y='numeric_variable', data=df, ci='sd')
plt.show()

sns.countplot(x='categorical_variable', data=df)
plt.show()

sns.pointplot(x='categorical_variable', y='numeric_variable', data=df, ci='sd')
plt.show()

#load the dataset (replace 'path/to/your/IndianCarsDataset.csv' with the actual file path)
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#data (replace this with your actual data)
data = pd.DataFrame({
    'Category': ['A']*200 + ['B']*250 + ['C']*300,
    'Numeric_Variable': list(np.random.randn(200)) + list(np.random.randn(250) + 2) + list(np.random.randn(300) - 2)
})

#create a violin plot
plt.figure(figsize=(20, 16))
sns.violinplot(x='Category', y='Numeric_Variable', data=data)
plt.title('Distribution of Numeric Variable Across different Categories')
plt.xlabel('Category')
plt.ylabel('Numeric Variable')
plt.show()

#load the dataset (replace 'path/to/your/IndianCarsDataset.csv' with the actual file path)
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#data (replace this with your actual data)
data = pd.DataFrame({
    'Category': ['A', 'B', 'C'],
    'Contribution_1': [37, 46, 95],
    'Contribution_2': [26, 55, 80],
    'Contribution_3': [35, 25, 70],
})

# Create a stacked bar chart
plt.figure(figsize=(10, 5))
bottom = [0] * len(data['Category'])

for i, column in enumerate(data.columns[1:]):
    plt.bar(data['Category'], data[column], label=column, bottom=bottom)
    bottom = [sum(x) for x in zip(bottom, data[column])]

plt.title('Combined Contribution of Different Categories')
plt.xlabel('DifferentCategory')
plt.ylabel('Contribution')
plt.legend(title='Contributions', loc='upper right')
plt.show()

# Load the dataset (replace 'path/to/your/IndianCarsDataset.csv' with the actual file path)
df = pd.read_csv('/content/drive/MyDrive/cars_ds_final.csv')

#Univariate Analysis
#Display descriptive statistics for numeric variables
desc_stats = iris.describe()
print(desc_stats)

#check the column names in your DataFrame
print(df.columns)

#calculate correlation matrix
correlation_matrix = iris.corr()

#plot heatmap
plt.figure(figsize=(10, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='plasma', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

#creating a scatter plot
plt.scatter(x, y, alpha=0.5)
plt.title('Scatter Plot of Two Numeric Variables')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')
plt.grid(True)
plt.show()

#correlation matrix for numerical variables
correlation_matrix = df.select_dtypes(include=np.number).corr() # Select only numeric columns for correlation calculation
sns.heatmap(correlation_matrix, annot=True, cmap='plasma')
plt.show()

np.random.seed(100)
your_data = np.random.normal(0, 1, 100)  # Replace this with your actual dataset

# Create a box plot
plt.figure(figsize=(10, 5))
sns.boxplot(x=your_data)
plt.title('Box Plot of Numerical Variable')
plt.xlabel('Numerical Variable')
plt.show()

